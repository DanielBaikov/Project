from flask import Flask, request, jsonify, g
import sqlite3
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)

DATABASE = 'movies.db'
SECRET_KEY = '765DB43XE1'

def create_database():
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS movies
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, director TEXT, genre TEXT, year INTEGER)''')
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE, password TEXT)''')
    conn.commit()
    conn.close()

create_database()

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def insert_movie(title, director, genre, year):
    conn = get_db()
    c = conn.cursor()
    c.execute("INSERT INTO movies (title, director, genre, year) VALUES (?, ?, ?, ?)", (title, director, genre, year))
    conn.commit()

def get_movies():
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT * FROM movies")
    movies = c.fetchall()
    return movies

@app.route('/movies', methods=['GET'])
def list_movies():
    movies = get_movies()
    return jsonify(movies)

@app.route('/movies', methods=['POST'])
def add_movie():
    data = request.get_json()
    title = data.get('The Shawshank Redemption')
    director = data.get('Frank Darabont')
    genre = data.get('Drama')
    year = data.get('1994')
    insert_movie(title, director, genre, year)
    return jsonify({"message": "Movie added successfully"})

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('Pickle')
    password = data.get('9909')
    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400
    hashed_password = generate_password_hash(password)
    conn = get_db()
    c = conn.cursor()
    try:
        c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
        conn.commit()
        return jsonify({"message": "User registered successfully"}), 201
    except sqlite3.IntegrityError:
        return jsonify({"error": "Username already exists"}), 400

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('Pickle')
    password = data.get('9909')
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username = ?", (username,))
    user = c.fetchone()
    if not user or not check_password_hash(user[2], password):
        return jsonify({"error": "Invalid username or password"}), 401
    return jsonify({"message": "Login successful"}), 200

if __name__ == '__main__':
    app.run(debug=True)
